name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'  # ‰ΩøÁî®Êõ¥Á®≥ÂÆöÁöÑLTSÁâàÊú¨

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Verify environment
        run: |
          echo "Go version:"
          go version
          echo "Node version:"
          node --version
          echo "npm version:"
          npm --version
          echo "Working directory:"
          pwd
          echo "Environment variables:"
          echo "PATH=$env:PATH"

      - name: Setup npm environment
        run: |
          # ÈáçÊñ∞ÂÆâË£ÖnpmÂà∞Ê≠£Á°Æ‰ΩçÁΩÆ
          npm install -g npm@latest
          npm --version
          npm config list

      - name: Install Wails
        run: |
          echo "Installing Wails..."
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo "Wails version:"
          wails version

      - name: Install Go dependencies
        run: |
          echo "Installing Go dependencies..."
          go mod tidy
          go mod download

      - name: Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          cd frontend
          if (Test-Path "package-lock.json") {
            Remove-Item "package-lock.json" -Force
          }
          if (Test-Path "node_modules") {
            Remove-Item "node_modules" -Recurse -Force
          }
          npm install
          echo "Frontend dependencies installed successfully"

      - name: Build Windows app
        run: |
          echo "Building Windows application..."
          wails build -platform windows/amd64 -ldflags "-s -w" -tags desktop
        env:
          CGO_ENABLED: 1

      - name: Verify build output
        run: |
          echo "Checking build output..."
          if (Test-Path "build/bin/ProxyWoman.exe") {
            echo "‚úÖ ProxyWoman.exe found"
            $size = (Get-Item "build/bin/ProxyWoman.exe").Length / 1MB
            echo "File size: $([math]::Round($size, 2)) MB"
          } else {
            echo "‚ùå ProxyWoman.exe not found"
            echo "Build directory contents:"
            Get-ChildItem -Recurse build/ -ErrorAction SilentlyContinue
            exit 1
          }

      - name: Create Windows package
        run: |
          echo "Creating Windows package..."
          New-Item -ItemType Directory -Path "dist" -Force
          $version = "${{ github.event.inputs.version || github.ref_name }}"
          $version = $version -replace '^v', ''
          
          $tempDir = "temp_windows"
          New-Item -ItemType Directory -Path $tempDir -Force
          Copy-Item "build/bin/ProxyWoman.exe" -Destination $tempDir
          
          if (Test-Path "README.md") {
            Copy-Item "README.md" -Destination $tempDir
          }
          
          # ÂàõÂª∫ÂêØÂä®ËÑöÊú¨
          @"
          @echo off
          echo ========================================
          echo       ProxyWoman v$version
          echo ========================================
          echo.
          echo Starting ProxyWoman...
          echo Web UI: http://localhost:3000
          echo Proxy Server: http://localhost:8080
          echo.
          echo Press Ctrl+C to stop the application
          echo ========================================
          echo.
          ProxyWoman.exe
          pause
          "@ | Out-File -FilePath "$tempDir/start.bat" -Encoding ASCII
          
          # ÂàõÂª∫ZIPÂåÖ
          $zipName = "ProxyWoman-$version-Windows.zip"
          Compress-Archive -Path "$tempDir/*" -DestinationPath "dist/$zipName"
          Remove-Item -Recurse -Force $tempDir
          
          echo "‚úÖ Package created: dist/$zipName"
          $zipSize = (Get-Item "dist/$zipName").Length / 1MB
          echo "Package size: $([math]::Round($zipSize, 2)) MB"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: dist/ProxyWoman-*-Windows.zip
          retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Verify environment
        run: |
          echo "Go version:"
          go version
          echo "Node version:"
          node --version
          echo "npm version:"
          npm --version
          echo "Working directory:"
          pwd
          echo "PATH: $PATH"

      - name: Install Wails
        run: |
          echo "Installing Wails..."
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo "Wails version:"
          wails version

      - name: Install Go dependencies
        run: |
          echo "Installing Go dependencies..."
          go mod tidy
          go mod download

      - name: Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          cd frontend
          rm -f package-lock.json
          rm -rf node_modules
          npm install
          echo "Frontend dependencies installed successfully"

      - name: Build macOS app
        run: |
          echo "Building macOS application..."
          export CGO_ENABLED=1
          export CGO_LDFLAGS="-framework UniformTypeIdentifiers"
          wails build -platform darwin/universal -ldflags "-s -w" -tags desktop

      - name: Verify build output
        run: |
          echo "Checking build output..."
          app_name="ProxyWoman"
          if [ -d "build/bin/${app_name}.app" ]; then
            echo "‚úÖ ${app_name}.app found"
            du -sh "build/bin/${app_name}.app"
          else
            echo "‚ùå ${app_name}.app not found"
            echo "Build directory contents:"
            find build/ -type f 2>/dev/null || true
            exit 1
          fi

      - name: Create macOS package
        run: |
          echo "Creating macOS package..."
          mkdir -p dist
          version="${{ github.event.inputs.version || github.ref_name }}"
          version="${version#v}"
          
          app_name="ProxyWoman"
          temp_dir="temp_dmg"
          rm -rf "$temp_dir"
          mkdir -p "$temp_dir"
          
          # Â§çÂà∂Â∫îÁî®
          cp -R "build/bin/${app_name}.app" "$temp_dir/"
          
          # ÂàõÂª∫ApplicationsÈìæÊé•
          ln -s /Applications "$temp_dir/Applications"
          
          # Ê∑ªÂä†README
          if [ -f "README.md" ]; then
            cp "README.md" "$temp_dir/"
          fi
          
          # ÂàõÂª∫DMG
          dmg_name="ProxyWoman-${version}-macOS"
          echo "Creating DMG: ${dmg_name}.dmg"
          hdiutil create -volname "$app_name" -srcfolder "$temp_dir" -ov -format UDZO -imagekey zlib-level=9 "dist/${dmg_name}.dmg"
          rm -rf "$temp_dir"
          
          echo "‚úÖ Package created: dist/${dmg_name}.dmg"
          echo "Package size: $(du -h "dist/${dmg_name}.dmg" | cut -f1)"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-package
          path: dist/ProxyWoman-*-macOS.dmg
          retention-days: 30

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: dist/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-package
          path: dist/

      - name: List artifacts
        run: |
          echo "üì¶ Release artifacts:"
          ls -la dist/
          echo ""
          echo "üìä File sizes:"
          du -h dist/*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/ProxyWoman-*-Windows.zip
            dist/ProxyWoman-*-macOS.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
